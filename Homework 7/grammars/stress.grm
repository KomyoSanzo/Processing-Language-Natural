import 'byte.grm' as bytelib;   # copy this file from grammars/byte.grm
Letter = bytelib.kAlpha;        # kAlpha is defined in byte.grm
Sigma = Letter | "'";           # alphabet also includes stress mark
Vowel = "a" | "e" | "i" | "o" | "u" | "A" | "E" | "I" | "O" | "U";
Consonant = Letter - Vowel;
Nucleus = Vowel+;

# YOU WILL FILL IN THE REST

# 7. (a)

AllSigma = bytelib.kGraph | bytelib.kSpace;

#first nucleus. starts with [BOS] or with some consonant.
BeforeNucleus = "[BOS]" | "[BOS]" Consonant+;

#other nuclei preceded with either Consonant-Nucleus-Consonant or a BeforeNucleus-Nucleus-Consonant.
BeforeNucleusLater = ((BeforeNucleus | Consonant+) Nucleus Consonant+);

Before = (BeforeNucleus | BeforeNucleusLater);

Later = Nucleus Consonant+ Nucleus;

export temp1 = CDRewrite[("" : "'"), Before, Later, AllSigma*, 'ltr', 'obl'];
export temp2 = CDRewrite[("" : "'"), "[BOS]" Consonant*, Nucleus Consonant* "[EOS]", AllSigma*, 'ltr', 'obl'];

export Stress = Optimize[temp1 @ temp2];

# (b)
export InvertStress = Invert[Stress];

# (c)
export StressWords = CDRewrite[Stress, " " | "[BOS]", " " | "[EOS]", AllSigma*, 'ltr', 'obl'];

# (d) extra credit
Y = "y" | "Y";
#"^" is vowel, "y" is consonant.
export TransducedY = CDRewrite[(Y : "^"), "", Consonant | "[EOS]", AllSigma*, 'ltr', 'obl'];
export Stressy = Optimize[TransducedY @ Stress @ Invert[TransducedY]];



