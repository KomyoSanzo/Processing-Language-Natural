import 'byte.grm' as bytelib;        # load a simple grammar (.grm)
ByteSigma = (bytelib.kSpace | bytelib.kGraph);  # printable characters
ByteSigmaStar = Optimize[ByteSigma*];

export LM = LoadFst['entrain.fst'];  # load trigram language model (.fst)
vocab = SymbolTable['entrain.sym'];  # load model's symbol table (.sym)
Spell = Optimize[StringFile['entrain.alpha', vocab, byte]];

# YOU WILL FILL IN THE REST

export Words = Optimize[StringFile['entrain.alpha', byte, vocab]];

# takes in the input and randomly completes word
export Complete = CDRewrite["" : ByteSigma*, "", "[EOS]", ByteSigmaStar, 'sim', 'obl'];

#All possible spellings
export allPossible = Project[Spell, 'output'];

export CompleteWord = Complete @ allPossible @ Words @ LM;

